# This Python file uses the following encoding: utf-8
import telebot
import param
import asyncio
import schedule
import time
import sys
import threading
from threading import Thread
from telethon_get import *
from sqlline import *
from keys import *

from telethon.sync import TelegramClient
from telethon import connection, functions, types, sync

bot = telebot.TeleBot(param.TOKEN)

def send_message():
    t = threading.currentThread()
    while getattr(t, "do_run", True):
        schedule.run_pending()
        time.sleep(1)

def function_to_run():
    max_grup = Sqldb.get_max_grup()
    for i in range(int(max_grup) + 1):
        param_g = Sqldb.get_param(i)
        messages = []
        if len(param_g['title']) > 0:
            messages = asyncio.run(Tele.main(param_g))

        if len(messages) > 0:
            try:
                for mess in messages:
                    global group_id
                    if str(mess['grouped_id']) == "None" or str(mess['grouped_id']) != str(group_id):

                        linkgrup_m = "https://t.me/" + str(param_g['title']) +"/" + str(mess['id'])
                        linkgrup = "https://t.me/" + str(param_g['title']) +"/"
                        media = mess['media']
                        if media != None:
                            for user in param_g['users']:
                                if media['_'] == 'MessageMediaWebPage':
                                    url = media['webpage']
                                    url = url['url']
                                    sock = '<a href = "' + str(url) + '">' + '|' + "</a>"
                                    sock = str(sock) + '<a href = "'+ str(linkgrup_m) +'">' + str(param_g["nazv"]) + "</a>"
                                    mtext = str(sock) + '\n\n'+ str(mess['message'])
                                    bot.send_message(user, mtext, parse_mode='HTML')
                                else:
                                    for user in param_g['users']:
                                        sock = '<a href = "'+ str(linkgrup_m) +'">' + str(param_g["nazv"]) + "</a>"
                                        mtext = str(sock) + '\n\n'+ str(mess['message'])
                                        bot.send_message(user, mtext, parse_mode='HTML')

                        else:
                            for user in param_g['users']:
                                sock = '<a href = "'+ str(linkgrup) +'">' + str(param_g["nazv"]) + "</a>"
                                bot.send_message(user,str(sock) + "\n\n" +str(mess['message']),
                                parse_mode='HTML', disable_web_page_preview=True)
                        group_id = mess['grouped_id']
                    else:
                        continue
                if len(messages) > 0:
                    global num_messages
                    num_messages += len(messages)
            except:
                e = sys.exc_info()[1]
                text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e.args[0])
                bot.send_message(param.AUTHOR_ID, text)
                print(str(param_g))

def info_print():
    global num_messages
    time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(time + ": –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ", num_messages, "–ø–æ—Å—Ç–æ–≤")
    num_messages = 0

def reclam():
    time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(time + ": –≤—Ä–µ–º—è —Ä–µ–∫–ª–∞–º—ã")
    user = Sqldb.get_user()
    for us in user:
        bot.send_message(us,"–ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞\n–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã: @Maxidik")

@bot.message_handler(commands=['start'])
def start_message(message):

    user = [message.chat.id, message.chat.username]
    prov = Sqldb.r_users(user)
    key = Keys.main_keys()

    if prov is True:
        bot.send_message(message.chat.id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', reply_markup = key)
    else:
        if len(message.text.split())>1 and message.text.split()[1] > 0:
            check = Sqldb.add_ref(message.text.split()[1])

            if check:
                text = "–ë—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–æ"
                bot.send_message(message.text.split()[1],text)
            else:
                text = "–ë—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ —Å–ª–æ—Ç–∞ 1/2"
                bot.send_message(message.text.split()[1],text)
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —ç—Ç–æ—Ç –±–æ—Ç'
        ' —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±—å–µ–¥–∏–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø.',
         reply_markup = key)

@bot.message_handler()
def get_message(message):
    if message.text == "‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª":
        prov = Sqldb.p_chanel(message.chat.id)

        if prov[0] < prov[1]:
            bot.send_message(message.chat.id,"–£ –≤–∞—Å —Å–µ–π—á–∞—Å %s –∏–∑ %s –∫–∞–Ω–∞–ª–æ–≤,"
            " —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π, –≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:"%
            (prov[0],prov[1]))
            bot.register_next_step_handler(message, addchanel)
        else:
            key = Keys.main_keys()
            bot.send_message(message.chat.id,"–£ –≤–∞—Å —Å–∞–π—á–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ"
            " –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤", reply_markup = key)
    elif message.text == "üîñ–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤":
        grup_g = Sqldb.get_grup(message.chat.id)
        if grup_g != None and grup_g != "None":
            grup_g = grup_g.split()
            if "None" in grup_g:
                grup_g.remove("None")
            if "None_p" in grup_g:
                grup_g.remove("None_p")
            grup_list = []
            for grup in grup_g:
                paramet = Sqldb.get_grup_param(grup)
                if paramet['g_id'] == "":
                    paramet['nazv'] = "–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω"
                    paramet['g_id'] = grup
                grup_list.append(paramet)
            print("====",message.chat.username,sep="\n",end=": \n")
            for grup in grup_list:
                print(grup['title'],grup['nazv'],sep="/")
            print('====')
            key = Keys.grup_list_keys(grup_list,message.chat.id)
            bot.send_message(message.chat.id,"–í–∞—à —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: ",
            reply_markup=key)
        else:
            key = Keys.main_keys()
            bot.send_message(message.chat.id,"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø",
            reply_markup = key)

    elif message.text == "‚≠ïÔ∏è–ü–æ–º–æ—â—å":
        key = Keys.main_keys()
        text = "–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø –≤ –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç–Ω—É—é –ª–∏–Ω–∏—é. \n–ü–æ –≤—Å–µ–º –∏–º–µ—é—â–∏–º—Å—è –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è - @Maxidik"
        bot.send_message(message.chat.id, text, reply_markup=key)
    elif message.text == "üë§–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        key = Keys.main_keys()
        paramet = Sqldb.get_us_param(message.chat.id)
        dop = int(paramet['refers'])%2
        if dop == 0:
            dop = 2
        refurl = "http://t.me/" + param.BOT_NAME + "?start=" + str(message.chat.id)
        text = "–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: %s \n–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –≥—Ä—É–ø–ø—ã: %s \n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n%s \n–ë–∞–ª–∞–Ω—Å: %s"%(paramet['refers'], dop, refurl, paramet['balans'])
        bot.send_message(message.chat.id, text, reply_markup=key)
    elif message.text == "-q":
        if str(message.chat.id) == str(param.AUTHOR_ID):
            print('–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
            t.do_run = False
            t.join()
            global exit
            exit = False
    else:
        bot.send_message(message.chat.id,"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def addchanel(message):

    result = asyncio.run(Tele.reg_grup(message))

    if result == 1:
        Sqldb.grup_plus(message.chat.id)
        bot.send_message(message.chat.id,"–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω, –∂–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
    elif result == 2:
        bot.send_message(message.chat.id,"–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫")
    elif result == 3:
        bot.send_message(message.chat.id,"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å—Ç—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
    else:
        bot.send_message(message.chat.id,"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –≥—Ä—É–ø–ø–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith('del_'))
def process_callback_delgru_del(callback_query: telebot.types.CallbackQuery):
    # code = callback_query.data[-1]
    info = re.split("[_]", str(callback_query.data))
    rez = Sqldb.edit_list(info)
    if rez == 0:
        bot.send_message(callback_query.from_user.id, "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–ª–µ–Ω")
    else:
        print("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—Å—Ç–∞")
    bot.answer_callback_query(callback_query.id)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith('pau_'))
def process_callback_delgru_del(callback_query: telebot.types.CallbackQuery):
    # code = callback_query.data[-1]
    info = re.split("[_]", str(callback_query.data))
    print(info)
    rez = Sqldb.edit_list(info)
    if rez == 1:
        bot.send_message(callback_query.from_user.id, "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
    else:
        print("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—Å—Ç–∞")
    bot.answer_callback_query(callback_query.id)

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith('beg_'))
def process_callback_delgru_del(callback_query: telebot.types.CallbackQuery):
    # code = callback_query.data[-1]
    info = re.split("[_]", str(callback_query.data))
    print(info)
    rez = Sqldb.edit_list(info)
    if rez == 2:
        bot.send_message(callback_query.from_user.id, "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    else:
        print("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—Å—Ç–∞")
    bot.answer_callback_query(callback_query.id)


if __name__ == "__main__":
    global group_id
    group_id = None

    global num_messages
    num_messages = 0
    #schedule.every(15).seconds.do(function_to_run)
    schedule.every(1).minutes.do(function_to_run)
    schedule.every(1).hour.do(info_print)
    schedule.every().day.at("12:00").do(reclam)
    schedule.every().day.at("15:00").do(reclam)
    schedule.every().day.at("18:00").do(reclam)
    t = threading.Thread(target=send_message)
    t.start()
    global exit
    exit = True
    while exit:
        try:
            bot.polling(none_stop=True)
        except:
            e = sys.exc_info()[1]
            text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e.args[0])
            bot.send_message(param.AUTHOR_ID, text)
            time.sleep(15)
